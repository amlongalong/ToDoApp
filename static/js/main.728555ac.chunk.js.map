{"version":3,"sources":["components/AddTaskForm.js","components/NewTask.js","components/TaskRow.js","components/ToDoApp.js","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","dispatch","newTodo","name","status","type","payload","props","useState","newTask","setNewTask","alertMsg","setAlertMsg","active","setActive","className","value","onChange","e","target","onClick","trim","dltTask","delRow","checkDone","done","setRemoveItem","setCheckItem","task","TaskRow","tasks","length","map","state","pendingTasks","filter","doneTasks","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","tasksCopy","taskListCopy","index","findIndex","splice","checkCopy","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.728555ac.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nconst AddTaskForm = (props) => {\r\n    let [newTask, setNewTask] = useState('')\r\n    let [alertMsg, setAlertMsg] = useState('')\r\n    let [active, setActive] = useState(false)\r\n    \r\n    let showInput = () => {\r\n            setActive(true)\r\n    }\r\n    let hideInput = () => {\r\n            setActive(false) \r\n    }\r\n    let changeTask = (e) => {\r\n            setNewTask (e.target.value)\r\n    }\r\n    let addTask = (e) => {\r\n        if(newTask.trim() !== '') {\r\n            props.newTodo(newTask, 'pending');\r\n            setAlertMsg('')\r\n        } else {\r\n            setAlertMsg('This field is required...')\r\n        }\r\n            setNewTask ('')\r\n    }\r\n    \r\n    if (active) {\r\n\r\n         return (\r\n            <div>\r\n                <div className=\"taskForm\">\r\n                    <h1>TASK:</h1>\r\n                    \r\n                    <input \r\n\r\n                    className=\"inputTask\"\r\n                    type=\"text\"\r\n                    value={props.newTask}\r\n                    onChange={changeTask}/>\r\n                    \r\n                    <br />\r\n\r\n                    <span>{alertMsg}</span>\r\n\r\n                    <br />\r\n\r\n                    <button \r\n                    className=\"addTaskBtn\"\r\n                    onClick={addTask}>\r\n                        +Add Task\r\n                    </button>\r\n\r\n                    <br />\r\n\r\n                    <button\r\n                        className=\"hideBtn\"\r\n                        onClick={hideInput}>\r\n                            Hide\r\n                    </button>\r\n                </div>\r\n            </div>)\r\n         } else {\r\n            return (\r\n                <div>\r\n                    <button\r\n                        className=\"showBtn\"\r\n                        onClick={showInput}>\r\n                            Show\r\n                    </button>\r\n                </div>\r\n            )\r\n         }\r\n     }  \r\n\r\n    const mapDispatchToProps = (dispatch) => {\r\n        return {\r\n            newTodo: (name, status) => dispatch ({type:'NEW_TODO', payload:{name, status}}),\r\n        }\r\n    }\r\n\r\nexport default connect(null, mapDispatchToProps)(AddTaskForm);","import {FcApproval, FcCancel} from 'react-icons/fc';\r\nimport {useState} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst NewTask = (props) => {\r\n    let [removeItem, setRemoveItem] = useState(\"\")\r\n    let [checkItem, setCheckItem] = useState(\"\")\r\n\r\n    let checkBtn = (e) => {\r\n        props.checkDone(props.task)\r\n        setCheckItem(e.target.value)\r\n    }\r\n    let cancelTask = (e) => {\r\n        props.dltTask(props.task)\r\n            setRemoveItem(e.target.value)\r\n    }\r\n    let {name} = props.task;\r\n        return (\r\n        <div>\r\n            <tr className=\"newTask\">\r\n                \r\n                <h3>{name}</h3>\r\n                { props.task.status === \"pending\" ?\r\n                \r\n                <button\r\n                className=\"doneBtn\"\r\n                onClick={checkBtn}>\r\n                    <FcApproval/>\r\n                </button>\r\n                : null\r\n                }\r\n\r\n                <button\r\n                className=\"cancelBtn\"\r\n                onClick={cancelTask}>\r\n                    <FcCancel/>\r\n                </button>\r\n            </tr>\r\n        </div>\r\n        )\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dltTask: (delRow) => dispatch ({type: 'DEL_TASK', payload:delRow }),\r\n        checkDone: (done) => dispatch ({type: 'CHECK_DONE', payload:done})\r\n    }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(NewTask);","import NewTask from \"./NewTask\";\r\n\r\n\r\nconst TaskRow = (props) => {\r\n        return (\r\n        <div>\r\n            {\r\n            props.tasks.length !== 0 ?\r\n                <table className=\"taskTable\">\r\n                    <th className=\"taskTblHead\">\r\n                        <h1>{props.status}</h1>\r\n                    </th>\r\n                    <tr className=\"taskTblRow\">\r\n                        {props.tasks.map( task => \r\n                        <NewTask\r\n                        checkDone={props.checkDone}\r\n                        dltTask={props.dltTask}\r\n                        task={task} />)}\r\n                    </tr>\r\n                </table>\r\n                :\r\n                <h2>No {props.status} Tasks</h2>\r\n            }\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default TaskRow;","import { useState } from 'react';\r\nimport AddTaskForm from './AddTaskForm';\r\nimport TaskRow from './TaskRow';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst ToDoApp = (props) => {\r\n    // let [tasks, setTasks] = useState([{name:\"\", status:\"\"}])\r\n\r\n    let pendingTasks = props.tasks.filter( task => task.status === 'pending');\r\n    let doneTasks = props.tasks.filter( task => task.status === 'done');\r\n\r\n    console.log(props)\r\n        return(\r\n            <div>\r\n                <h1 className=\"headName\">To Do App</h1>\r\n                <div className=\"toDoApp\">\r\n                    <div className=\"ToDo\">\r\n\r\n                    <AddTaskForm/>\r\n\r\n                    \r\n                    <TaskRow\r\n                    tasks={pendingTasks} status='Pending'/>\r\n\r\n                    \r\n                    <TaskRow\r\n                    tasks={doneTasks} status='Done'/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ToDoApp);","import './App.css';\r\nimport ToDoApp from './components/ToDoApp';\r\n\r\n\r\n\r\n\r\nfunction App () {\r\n  return (\r\n      <div className=\"App\">\r\n        <ToDoApp />\r\n        \r\n      </div>\r\n    \r\n  )\r\n}\r\n    \r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState = {\r\n    tasks: [\r\n        {name: 'kain', status: 'done'},\r\n        {name: 'ligo', status: 'done'},\r\n        {name: 'tulog', status: 'done'}\r\n    ]\r\n}\r\n\r\nconst reducer = (state = initialState, action ) => {\r\n\r\n        switch(action.type) {\r\n            case \"NEW_TODO\": {\r\n                let newTask = {\r\n                    name: action.payload.name, \r\n                    status: action.payload.status\r\n                }\r\n\r\n                let tasksCopy = [...state.tasks, newTask];\r\n                return  {\r\n                    ...state,\r\n                    tasks:tasksCopy\r\n                }\r\n            }\r\n            case \"DEL_TASK\": {\r\n                    let taskListCopy = [...state.tasks]\r\n                    let index =state.tasks.findIndex((task) => task.name === action.payload.name)\r\n                    if (index !== -1)\r\n                    taskListCopy.splice(index, 1)\r\n                    return {\r\n                        ...state,\r\n                        tasks:taskListCopy\r\n                    }\r\n            }\r\n            case \"CHECK_DONE\": {\r\n                    let checkCopy = [...state.tasks]\r\n                    let index =state.tasks.findIndex((task) => task.name === action.payload.name)\r\n                    if (index !== -1)\r\n                        checkCopy[index].status = \"done\"\r\n                    return {\r\n                        ...state,\r\n                        tasks:checkCopy\r\n                    }\r\n            }\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n        \r\nexport default reducer;\r\n\r\n            // case \"COUNTER_PLUS_PLUS\":\r\n            //     return {\r\n            //         ...state,\r\n            //         counter: state.counter+1\r\n            //     }\r\n            // case \"COUNTER_MINUS_MINUS\":\r\n            //     return {\r\n            //         ...state,\r\n            //         counter: state.counter-1\r\n            //     }\r\n            // case \"ADD_COUNTER\":\r\n            //     return {\r\n            //         ...state,\r\n            //         counter: state.counter + action.payload*1\r\n            //     }\r\n            // case \"ADD_TASK\": {\r\n\r\n            // }\r\n        // kung ano ang rereturn ayun na yung bagong state...mag oover-wrtie\r\n        // gagamit ka ng spread para magka copy ng buong state (...state)\r\n        // return state;\r\n\r\n","import { createStore } from 'redux'\r\nimport reducer  from './reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}